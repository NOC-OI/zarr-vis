"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[456],{75:(e,t,r)=>{r.r(t),r.d(t,{default:()=>i});var l=r(5403);class i extends l.A{decodeBlock(e){let t=new DataView(e),r=[];for(let l=0;l<e.byteLength;++l){let e=t.getInt8(l);if(e<0){let i=t.getUint8(l+1);e=-e;for(let t=0;t<=e;++t)r.push(i);l+=1}else{for(let i=0;i<=e;++i)r.push(t.getUint8(l+i+1));l+=e+1}}return new Uint8Array(r).buffer}}},5403:(e,t,r)=>{r.d(t,{A:()=>l});class l{async decode(e,t){let r=await this.decodeBlock(t),l=e.Predictor||1;if(1!==l){let t=!e.StripOffsets;return function(e,t,r,l,i,n){if(!t||1===t)return e;for(let e=0;e<i.length;++e){if(i[e]%8!=0)throw Error("When decoding with predictor, only multiple of 8 bits are supported.");if(i[e]!==i[0])throw Error("When decoding with predictor, all samples must have the same size.")}let o=i[0]/8,a=2===n?1:i.length;for(let n=0;n<l;++n){let l;if(n*a*r*o>=e.byteLength)break;if(2===t){switch(i[0]){case 8:l=new Uint8Array(e,n*a*r*o,a*r*o);break;case 16:l=new Uint16Array(e,n*a*r*o,a*r*o/2);break;case 32:l=new Uint32Array(e,n*a*r*o,a*r*o/4);break;default:throw Error(`Predictor 2 not allowed with ${i[0]} bits per sample.`)}!function(e,t){let r=e.length-t,l=0;do{for(let r=t;r>0;r--)e[l+t]+=e[l],l++;r-=t}while(r>0)}(l,a,o)}else 3===t&&function(e,t,r){let l=0,i=e.length,n=i/r;for(;i>t;){for(let r=t;r>0;--r)e[l+t]+=e[l],++l;i-=t}let o=e.slice();for(let t=0;t<n;++t)for(let l=0;l<r;++l)e[r*t+l]=o[(r-l-1)*n+t]}(l=new Uint8Array(e,n*a*r*o,a*r*o),a,o)}return e}(r,l,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return r}}}}]);