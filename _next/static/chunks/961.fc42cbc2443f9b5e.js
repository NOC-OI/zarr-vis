"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[961],{1961:(e,t,r)=>{r.r(t),r.d(t,{default:()=>l});var i=r(5403);class l extends i.A{decodeBlock(e){return e}}},5403:(e,t,r)=>{r.d(t,{A:()=>i});class i{async decode(e,t){let r=await this.decodeBlock(t),i=e.Predictor||1;if(1!==i){let t=!e.StripOffsets;return function(e,t,r,i,l,n){if(!t||1===t)return e;for(let e=0;e<l.length;++e){if(l[e]%8!=0)throw Error("When decoding with predictor, only multiple of 8 bits are supported.");if(l[e]!==l[0])throw Error("When decoding with predictor, all samples must have the same size.")}let o=l[0]/8,a=2===n?1:l.length;for(let n=0;n<i;++n){let i;if(n*a*r*o>=e.byteLength)break;if(2===t){switch(l[0]){case 8:i=new Uint8Array(e,n*a*r*o,a*r*o);break;case 16:i=new Uint16Array(e,n*a*r*o,a*r*o/2);break;case 32:i=new Uint32Array(e,n*a*r*o,a*r*o/4);break;default:throw Error(`Predictor 2 not allowed with ${l[0]} bits per sample.`)}!function(e,t){let r=e.length-t,i=0;do{for(let r=t;r>0;r--)e[i+t]+=e[i],i++;r-=t}while(r>0)}(i,a,o)}else 3===t&&function(e,t,r){let i=0,l=e.length,n=l/r;for(;l>t;){for(let r=t;r>0;--r)e[i+t]+=e[i],++i;l-=t}let o=e.slice();for(let t=0;t<n;++t)for(let i=0;i<r;++i)e[r*t+i]=o[(r-i-1)*n+t]}(i=new Uint8Array(e,n*a*r*o,a*r*o),a,o)}return e}(r,i,t?e.TileWidth:e.ImageWidth,t?e.TileLength:e.RowsPerStrip||e.ImageLength,e.BitsPerSample,e.PlanarConfiguration)}return r}}}}]);